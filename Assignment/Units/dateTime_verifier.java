/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment.Units;

import com.toedter.calendar.IDateEditor;
import com.toedter.calendar.JTextFieldDateEditor;

import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.time.LocalTime;
import java.util.Date;
import java.util.Objects;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Hp
 */
public class dateTime_verifier extends javax.swing.JFrame {

    /**
     * Creates new form dateTime_verifier
     */
    public dateTime_verifier() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        calender = new com.toedter.calendar.JDateChooser();
        startTime = new javax.swing.JComboBox<>();
        endTime = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        calender.getDateEditor().setEnabled(false);

        IDateEditor dateEditor = calender.getDateEditor();
        JTextFieldDateEditor txtFld = (JTextFieldDateEditor) dateEditor;
        txtFld.setDisabledTextColor(Color.black);

        calender.setDateFormatString("d-M-yyyy");

//        calender.getJCalendar().setPreferredSize(new Dimension(300, 250));
//        calender.getJCalendar().setFont(new Font("Segoe UI", 0, 8));


        calender.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                if (calender.getDate() != null) {
                    today = new Date();
                    yesterday = new Date(today.getTime() - (1000 * 3600 * 24));
                    if (calender.getDate().before(yesterday)) {
                        JOptionPane.showMessageDialog(rootPane, "You are selecting past date, please select again", "Error", JOptionPane.ERROR_MESSAGE);
                    } else {
                        dateChose = ((JTextField) calender.getDateEditor().getUiComponent()).getText();
//                        System.out.println(dateChose);
                    }
                }
            }
        });
        startingTime = new String[]{"08:00", "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"};
        startTime.setModel(new javax.swing.DefaultComboBoxModel<>(startingTime));
//        jComboBox1.setEnabled(false);
//        jComboBox1.getEditor().getEditorComponent().setForeground(Color.black);
        endingTime = new String[]{"09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"};
        endTime.setModel(new javax.swing.DefaultComboBoxModel<>(endingTime));

        jButton1.setText("Verify");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(calender, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(endTime, 0, 102, Short.MAX_VALUE)
                                .addContainerGap())
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(161, 161, 161))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(startTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(endTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(calender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(76, 76, 76)
                                .addComponent(jButton1)
                                .addContainerGap(137, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            File file = new File("src/main/java/Assignment/data/appointment.txt");
            Scanner reader = new Scanner(file);
            LocalTime choseStartTime = LocalTime.parse((String) Objects.requireNonNull(startTime.getSelectedItem()));
            LocalTime choseEndTime = LocalTime.parse((String) Objects.requireNonNull(endTime.getSelectedItem()));
            while (reader.hasNextLine()){
                String[] line = reader.nextLine().split(",");
                if (dateChose.equals(line[1])){
                    if (LocalTime.parse(line[2]).isBefore(choseEndTime) && choseStartTime.isAfter(LocalTime.parse(line[3]))){
                        validApptFlag = true;
                    }else{
                        validApptFlag = false;
                        break;
                    }
                }else {validApptFlag = true;}
            }

            if(validApptFlag){
                System.out.println("Acceptable");
            }else{
                System.out.println("Decline");
            }

        }catch (FileNotFoundException io){
            Logger.getLogger(dateTime_verifier.class.getName()).log(Level.SEVERE, null, io);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dateTime_verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dateTime_verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dateTime_verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dateTime_verifier.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dateTime_verifier().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> startTime;
    private javax.swing.JComboBox<String> endTime;
    private com.toedter.calendar.JDateChooser calender;
    private Date today, yesterday;
    private boolean validApptFlag;
    private String[] startingTime, endingTime;
    private String dateChose;

    // End of variables declaration
}

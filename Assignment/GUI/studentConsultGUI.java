/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment.GUI;

import Assignment.Objects.Appointment;
import Assignment.Repositories.AppointmentRepository;
import Assignment.Repositories.UserRepository;
import Assignment.Objects.User;
import Assignment.status.STATUS;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

//import static sun.jvm.hotspot.debugger.win32.coff.DebugVC50X86RegisterEnums.STATUS;

/**
 * @author Hp
 */
public class studentConsultGUI extends JFrame {

    /**
     * Creates new form student_signedIn
     */
    public studentConsultGUI(String accountName, String accountID) {
        initComponents(accountName, accountID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String accountName, String accountID) {

        jSeparator2 = new JSeparator();
        history = new JLabel();
        feedback = new JLabel();
        dashboard = new JLabel();
        appointment = new JLabel();
        timeSlot_consult = new JLabel();
        jSeparator1 = new JSeparator();
        jPanel2 = new JPanel();
        picHolder = new JLabel();
        name = new JLabel();
        id = new JLabel();
        exit = new JLabel();
        nameLabel = new JLabel();
        textFieldName = new JTextField();
        IDlabel = new JLabel();
        textFieldID = new JTextField();
        lectureNameLabel = new JLabel();
        lecturerDropdown = new JComboBox<>();
        timeSlotLabel = new JLabel();
        timeSlotDropdown = new JComboBox<>();
        purposeLabel = new JLabel();
        confirmButton = new JButton();
        dateLabel = new JLabel();
        dateDropdown = new JComboBox<>();
        jScrollPane1 = new JScrollPane();
        purposeInput = new JTextArea();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        isStudent = accountID.startsWith("S");

        jSeparator2.setForeground(new Color(0, 0, 0));
        jSeparator2.setOrientation(SwingConstants.VERTICAL);

        history.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        history.setText("History");
        history.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        history.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                historyMouseClicked(evt, accountName, accountID);
            }
        });

        feedback.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        feedback.setText("Feedback");
        feedback.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        feedback.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                feedbackMouseClicked(evt, accountName, accountID);
            }
        });

        dashboard.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        dashboard.setText("Dashboard");
        dashboard.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        dashboard.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                dashboardMouseClicked(evt, accountName, accountID);
            }
        });

        appointment.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        appointment.setText("Appointment");
        appointment.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        appointment.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                appointmentMouseClicked(evt, accountName, accountID);
            }
        });
        timeSlot_consult.setFont(new Font("Segoe UI", 1, 16)); // NOI18N
        String text = isStudent ? "Consult" : "Time Slot";
        timeSlot_consult.setText(text);
        timeSlot_consult.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        timeSlot_consult.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                consultMouseClicked(evt, accountName, accountID);
            }
        });

        jSeparator1.setForeground(new Color(0, 0, 0));

        jPanel2.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));


        name.setFont(new Font("Segoe UI", 0, 10)); // NOI18N
        name.setText(accountName);

        id.setFont(new Font("Segoe UI", 0, 10)); // NOI18N
        id.setText(accountID);

        ImageIcon profilePic = new ImageIcon("src/main/java/Assignment/image/profile_pic_50x50.png");
        picHolder.setIcon(profilePic);
        picHolder.setText("");

        ImageIcon exitPic = new ImageIcon("src/main/java/Assignment/image/sign_out.png");
        exit.setIcon(exitPic);
        exit.setText("");
        exit.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                ExitMouseClicked(evt);
            }
        });


        nameLabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        nameLabel.setText("Name:");

        textFieldName.setEditable(false);
        textFieldName.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        textFieldName.setText(accountName);

        IDlabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        IDlabel.setText("ID:");

        textFieldID.setEditable(false);
        textFieldID.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        textFieldID.setText(accountID);

        lectureNameLabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        lectureNameLabel.setText("Lecturer:");

        lecturerDropdown.setEditable(true);
        lecturerDropdown.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        for (User line : userList) {
            if (line.accountID.startsWith("L")) {
                lecturerDropdown.addItem(line.accountName);
            }
        }

        lecturerDropdown.setSelectedIndex(-1);
        lecturerDropdown.getEditor().getEditorComponent().addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                comboBoxFilter(lecturerDropdown.getEditor().getItem().toString());
            }
        });

        timeSlotLabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        timeSlotLabel.setText("Time Slot:");

        timeSlotDropdown.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        timeSlotDropdown.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                getSelectedTime();
            }
        });

        purposeLabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        purposeLabel.setText("Purpose:");

        confirmButton.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        confirmButton.setText("Submit");
        confirmButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                confirmButtonActionPerformed(evt, accountID);
            }
        });

        dateLabel.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        dateLabel.setText("Date:");

        dateDropdown.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        dateDropdown.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                getSelectedDate();
            }
        });

        purposeInput.setColumns(20);
        purposeInput.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        purposeInput.setRows(10);

        purposeInput.setLineWrap(true);
        jScrollPane1.setViewportView(purposeInput);
        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(picHolder, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(name, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(id, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addComponent(exit)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(picHolder, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                .addComponent(exit, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(name)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(id))))
                                .addGap(9, 9, 9))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                                        .addComponent(dashboard)
                                                        .addComponent(history)
                                                        .addComponent(feedback)
                                                        .addComponent(appointment)
                                                        .addComponent(timeSlot_consult)))
                                        .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(confirmButton)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(nameLabel, GroupLayout.PREFERRED_SIZE, 51, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(textFieldName, GroupLayout.PREFERRED_SIZE, 132, GroupLayout.PREFERRED_SIZE)
                                                .addGap(30, 30, 30)
                                                .addComponent(IDlabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(textFieldID, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
                                                .addGap(42, 42, 42)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED))

                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(purposeLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lectureNameLabel, GroupLayout.Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(4, 4, 4)
                                                                .addComponent(lecturerDropdown, GroupLayout.PREFERRED_SIZE, 97, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(32, 32, 32)
                                                                .addComponent(dateLabel, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(dateDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(timeSlotLabel)
                                                                .addGap(18,18,18)
                                                                .addComponent(timeSlotDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(18, 18, 18)
                                                                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 434, GroupLayout.PREFERRED_SIZE)
                                                                .addGap(0, 0, Short.MAX_VALUE)))))
                                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator2)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(dashboard, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(history, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(feedback, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(appointment, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(timeSlot_consult, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 3, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 18, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(nameLabel, GroupLayout.PREFERRED_SIZE, 24, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(textFieldName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(IDlabel)
                                        .addComponent(textFieldID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(lectureNameLabel)
                                        .addComponent(timeSlotLabel)
                                        .addComponent(timeSlotDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(dateLabel)
                                        .addComponent(lecturerDropdown, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(purposeLabel)
                                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(confirmButton)
                                .addGap(33, 33, 33))
        );
        pack();
    }// </editor-fold>

    private void ExitMouseClicked(MouseEvent evt) {
        int selection = JOptionPane.showConfirmDialog(rootPane, "Are you sure want to logout...");
        if (selection == JOptionPane.YES_OPTION) {
            loginGUI login = new loginGUI();
            login.setVisible(true);
            this.dispose();
        }
    }

    private void comboBoxFilter(String name) {
//        String choseLecturerName = "";
//        System.out.println(name);
        JTextField editorField = (JTextField) lecturerDropdown.getEditor().getEditorComponent();
        editorField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String input = editorField.getText();
                lecturerDropdown.hidePopup();
                lecturerDropdown.removeAllItems();

                // Add items matching user input to combo box
                for (User line : userList) {
                    if (line.accountName.toLowerCase().contains(input.toLowerCase()) && line.accountID.startsWith("L")) {
                        lecturerDropdown.addItem(line.accountName);
                    }
                }
                lecturerDropdown.showPopup();
                editorField.setText(input);
            }
        });

        lecturerDropdown.addActionListener(_ -> {
            choseLecturerName = (String) lecturerDropdown.getSelectedItem();
        });

        dateDropdown.removeAllItems();
        for (User line : userList) {
            if (line.accountName.equals(choseLecturerName)) {
                lectureID = line.accountID;
//                System.out.println(lectureID);
                break;
            }
        }
//        DefaultTableModel model = (DefaultTableModel) dateDropdown.getModel();
        boolean isExist = false;
        for (Appointment appointment : appointmentList) {
            if (appointment.lecturerID.equals(lectureID) && appointment.status.equals(String.valueOf(STATUS.Available))) {
                for (int i = 0; i < dateDropdown.getItemCount(); i++){
                    isExist = dateDropdown.getItemAt(i).equals(appointment.date);
                }
                if (!isExist){
                    dateDropdown.addItem(appointment.date);
                }
            }
        }
    }


    private void getSelectedDate() {
        selectedDate = (String) dateDropdown.getSelectedItem();
        timeSlotDropdown.removeAllItems();
        System.out.println(lectureID);
        for (Appointment appointment : appointmentList) {
//            System.out.printf("%b, %b, %b\n", appointment.lecturerID.equals(lectureID), appointment.status.equals(String.valueOf(STATUS.Available)), appointment.date.equals(selectedDate));
            if (appointment.lecturerID.equals(lectureID) && appointment.status.equals(String.valueOf(STATUS.Available)) && appointment.date.equals(selectedDate)) {
                timeSlotDropdown.addItem(String.format("%s - %s", appointment.startTime, appointment.endTime));
            }
        }
    }

    private void getSelectedTime() {
        chooseTimeRange = (String) timeSlotDropdown.getSelectedItem();
//        System.out.printf("%s %s\n", selectedDate, selectedTime);
    }

    private void dashboardMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        dashboardGUI obj = new dashboardGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void historyMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        historyGUI obj = new historyGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();

    }

    private void feedbackMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        feedbackGUI obj = new feedbackGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void appointmentMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        appointmentGUI obj = new appointmentGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void consultMouseClicked(MouseEvent evt, String accountName, String accountID) {
        if (isStudent) {
            studentConsultGUI obj = new studentConsultGUI(accountName, accountID);
            obj.setVisible(true);
        } else {
            lecturerSetApptGUI obj = new lecturerSetApptGUI(accountName, accountID);
            obj.setVisible(true);
        }
        this.dispose();
    }

    private void confirmButtonActionPerformed(ActionEvent evt, String accountID) {
        selectedTime = chooseTimeRange.split("-")[0].trim();
        System.out.printf("%s,%s,%s\n", lectureID, selectedDate, selectedTime);
        String reason = purposeInput.getText();
        if (reason.contains(",")) {
            reason = reason.replace(",", "$COMMA$");
        }
        for (Appointment line : appointmentList) {
            if (line.lecturerID.equals(lectureID) && line.date.equals(selectedDate) && line.startTime.equals(selectedTime)) {
                System.out.printf("%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n", line.apptID, line.date, line.startTime, line.endTime, line.purpose, line.studentID, line.lecturerID, line.status, line.studentFeed, line.lecturerFeed);
                line.studentID = accountID;
                line.status = String.valueOf(STATUS.Pending);
//                System.out.println(List.of(line));
                break;
            }
        }
        appointmentRepo.modifyAppointment(appointmentList);
        JOptionPane.showMessageDialog(rootPane, "Appointment Book Successfully");
        lecturerDropdown.setSelectedIndex(-1);
        purposeInput.setText("");
    }

    private void reschedule(String accountName) {
        if (accountName != null) {
            lecturerDropdown.setSelectedItem("Alpha");
            comboBoxFilter((String) lecturerDropdown.getSelectedItem());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(rescheduleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(rescheduleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(rescheduleGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(rescheduleGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new studentConsultGUI("Kwan", "S2").setVisible(true);
//                new appointmentGUI().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify
    private JLabel IDlabel;
    private JLabel appointment;
    private JButton confirmButton;
    private JLabel timeSlot_consult;
    private JLabel dashboard;
    private JComboBox<String> dateDropdown;
    private JLabel dateLabel;
    private JLabel exit;
    private JLabel feedback;
    private JLabel history;
    private JLabel id;
    private JPanel jPanel2;
    private JScrollPane jScrollPane1;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JTextArea purposeInput;
    private JLabel lectureNameLabel;
    private JComboBox<String> lecturerDropdown;
    private JLabel name;
    private JLabel nameLabel;
    private JLabel picHolder;
    private JLabel purposeLabel;
    private JTextField textFieldID;
    private JTextField textFieldName;
    private JComboBox<String> timeSlotDropdown;
    private JLabel timeSlotLabel;
    private String lectureID, selectedDate, selectedTime, chooseTimeRange, choseLecturerName;
    private boolean isStudent;
    private UserRepository userRepo = new UserRepository();
    private AppointmentRepository appointmentRepo = new AppointmentRepository();
    private final List<User> userList = userRepo.getUsers();
    private final List<Appointment> appointmentList = appointmentRepo.getAppointment();
// End of variables declaration
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment.GUI;


import Assignment.Objects.Appointment;
import Assignment.Objects.User;
import Assignment.Repositories.AppointmentRepository;
import Assignment.Repositories.UserRepository;
import Assignment.status.STATUS;
import table.TableCustom;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author Hp
 */
public class dashboardGUI extends JFrame {

    /**
     * Creates new form student_signedIn
     */
    public dashboardGUI(String accountName, String accountID) {
        initComponents(accountName, accountID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String accountName, String accountID) {

        jSeparator2 = new JSeparator();
        history = new JLabel();
        feedback = new JLabel();
        dashboard = new JLabel();
        appointment = new JLabel();
        timeSlot_Consult = new JLabel();
        jSeparator1 = new JSeparator();
        jPanel2 = new JPanel();
        picHolder = new JLabel();
        name = new JLabel();
        id = new JLabel();
        exit = new JLabel();
        bigPic = new JLabel();
        BigName = new JLabel();
        studentID = new JLabel();
        upcomingAppointmentLabel = new JLabel();
        jScrollPane2 = new JScrollPane();
        upcomingApptTable = new JTable();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        isStudent = accountID.startsWith("S");

        jSeparator2.setForeground(new Color(0, 0, 0));
        jSeparator2.setOrientation(SwingConstants.VERTICAL);

        history.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        history.setText("History");
        history.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        history.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                historyMouseClicked(evt, accountName, accountID);
            }
        });

        feedback.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        feedback.setText("Feedback");
        feedback.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        feedback.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                feedbackMouseClicked(evt, accountName, accountID);
            }
        });

        dashboard.setFont(new Font("Segoe UI", 1, 16)); // NOI18N
        dashboard.setText("Dashboard");
        dashboard.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        dashboard.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                dashboardMouseClicked(evt, accountName, accountID);
            }
        });

        appointment.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        appointment.setText("Appointment");
        appointment.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        appointment.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                appointmentMouseClicked(evt, accountName, accountID);
            }
        });

        timeSlot_Consult.setFont(new Font("Segoe UI", 0, 16)); // NOI18N
        String text = isStudent ? "Consult" : "Time Slot";
        timeSlot_Consult.setText(text);

        timeSlot_Consult.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        timeSlot_Consult.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                consultMouseClicked(evt, accountName, accountID);
            }
        });

        jSeparator1.setForeground(new Color(0, 0, 0));

        jPanel2.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));

        name.setFont(new Font("Segoe UI", 0, 10)); // NOI18N
        name.setText(accountName);

        id.setFont(new Font("Segoe UI", 0, 10)); // NOI18N
        id.setText(accountID);


        ImageIcon profilePic = new ImageIcon("src/main/java/Assignment/image/profile_pic_50x50.png");
        picHolder.setIcon(profilePic);
        picHolder.setText("");

        ImageIcon exitPic = new ImageIcon("src/main/java/Assignment/image/sign_out.png");
        exit.setIcon(exitPic);
        exit.setText("");
        exit.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                ExitMouseClicked(evt);
            }
        });


        ImageIcon bigProfilePic = new ImageIcon("src/main/java/Assignment/image/profile_pic_90x90.png");
        bigPic.setIcon(bigProfilePic);
        bigPic.setText("");


        BigName.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        BigName.setText(accountName);

        studentID.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        studentID.setText(accountID);

        upcomingAppointmentLabel.setText("Upcoming Appointment:");

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(picHolder, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(name, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(id, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addComponent(exit)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(picHolder, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                .addComponent(exit, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(name)
                                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(id))))
                                .addGap(9, 9, 9))
        );
        String role = isStudent ? "Lecturer" : "Student";
        upcomingApptTable.setModel(new DefaultTableModel(
                new Object [][] {
                },
                new String [] {
                        "Date", "Time", role + " Name"
                }
        )
        {
            Class[] types = new Class[]{
                    String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean[]{
                    false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });

        DefaultTableModel model = (DefaultTableModel) upcomingApptTable.getModel();
        updateTable(accountID, model);

        jScrollPane2.setViewportView(upcomingApptTable);
        TableCustom.apply(jScrollPane2, TableCustom.TableType.MULTI_LINE);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.CENTER)
                                                        .addComponent(dashboard)
                                                        .addComponent(history)
                                                        .addComponent(feedback)
                                                        .addComponent(appointment)
                                                        .addComponent(timeSlot_Consult)))
                                        .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(57, 57, 57)
                                                .addComponent(bigPic, GroupLayout.PREFERRED_SIZE, 87, GroupLayout.PREFERRED_SIZE)
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                                        .addComponent(BigName)
                                                        .addComponent(studentID, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addComponent(upcomingAppointmentLabel)
                                                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 452, GroupLayout.PREFERRED_SIZE))))
                                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jSeparator2)
                                .addContainerGap())
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(dashboard, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(history, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(feedback, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(appointment, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(timeSlot_Consult, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 3, GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(8, 8, 8)
                                                                .addComponent(bigPic, GroupLayout.PREFERRED_SIZE, 86, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(19, 19, 19)
                                                                .addComponent(BigName)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(studentID)))
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(upcomingAppointmentLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 124, GroupLayout.PREFERRED_SIZE)
                                                .addGap(14, 14, 14))))
        );

        pack();
    }// </editor-fold>

    private void updateTable(String accountID, DefaultTableModel model) {
        model.setRowCount(0);
        System.out.println(accountID);
        String date = "", time = "", name = "";
        System.out.println(appointmentList.size());
        for (Appointment appointment: appointmentList){
            boolean matchFound = false;
            if (!appointment.status.equals(String.valueOf(STATUS.Approved))){
                continue;
            }
            if (isStudent && appointment.studentID.equals(accountID)){
                date = appointment.date;
                time = String.format("%s - %s", appointment.startTime, appointment.endTime);
                for (User user: userList){
                    if (user.accountID.equals(appointment.lecturerID)){
                        name= user.accountName;
                        matchFound = true;
                    }
                }
            }else if (!isStudent && appointment.lecturerID.equals(accountID)){
                date = appointment.date;
                time = String.format("%s - %s", appointment.startTime, appointment.endTime);
                for (User user: userList){
                    if (user.accountID.equals(appointment.studentID)){
                        name= user.accountName;
                        matchFound = true;
                    }
                }
            }
            if (matchFound){
                model.insertRow(0, new Object[]{date, time, name});
            }
        }
    }

    private void dashboardMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        dashboardGUI obj = new dashboardGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void historyMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        historyGUI obj = new historyGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();

    }

    private void feedbackMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        feedbackGUI obj = new feedbackGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void appointmentMouseClicked(MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        appointmentGUI obj = new appointmentGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void consultMouseClicked(MouseEvent evt, String accountName, String accountID) {
        if (isStudent) {
            studentConsultGUI obj = new studentConsultGUI(accountName, accountID);
            obj.setVisible(true);
        } else {
            lecturerSetApptGUI obj = new lecturerSetApptGUI(accountName, accountID);
            obj.setVisible(true);
        }
        this.dispose();
    }

    private void ExitMouseClicked(MouseEvent evt) {
        int selection = JOptionPane.showConfirmDialog(rootPane, "Are you sure want to logout...");
        if (selection == JOptionPane.YES_OPTION) {
            loginGUI login = new loginGUI();
            login.setVisible(true);
            this.dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(dashboardGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(dashboardGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(dashboardGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(dashboardGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboardGUI("", "").setVisible(true);
//                new appointmentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private JLabel BigName;
    private JLabel appointment;
    private JLabel bigPic;
    private JLabel timeSlot_Consult;
    private JLabel dashboard;
    private JLabel exit;
    private JLabel feedback;
    private JLabel history;
    private JLabel id;
    private JPanel jPanel2;
    private JScrollPane jScrollPane2;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JLabel name;
    private JLabel picHolder;
    private JLabel studentID;
    private JLabel upcomingAppointmentLabel;
    private JTable upcomingApptTable;
    private boolean isStudent;
    private UserRepository userRepo = new UserRepository();
    private AppointmentRepository appointmentRepo = new AppointmentRepository();
    private List<User> userList = userRepo.getUsers();
    private List<Appointment> appointmentList = appointmentRepo.getAppointment();
    // End of variables declaration
}

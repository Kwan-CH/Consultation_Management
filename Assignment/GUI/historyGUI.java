/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Assignment.GUI;

import Assignment.Objects.Appointment;
import Assignment.Repositories.AppointmentRepository;
import Assignment.Repositories.UserRepository;
import Assignment.Objects.User;
import Assignment.status.STATUS;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import table.TableCustom;

/**
 * @author Hp
 */
public class historyGUI extends javax.swing.JFrame {

    /**
     * Creates new form student_signedIn
     */
    public historyGUI(String accountName, String accountID) {
        initComponents(accountName, accountID);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
//    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String accountName, String accountID) {

        jSeparator2 = new javax.swing.JSeparator();
        history = new javax.swing.JLabel();
        feedback = new javax.swing.JLabel();
        dashboard = new javax.swing.JLabel();
        appointmentLable = new javax.swing.JLabel();
        timeSlot_consult = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        picHolder = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        id = new javax.swing.JLabel();
        exit = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        apptHistoryTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        isStudent = accountID.startsWith("S");

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        history.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        history.setText("History");
        history.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        history.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyMouseClicked(evt, accountName, accountID);
            }
        });

        feedback.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        feedback.setText("Feedback");
        feedback.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        feedback.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                feedbackMouseClicked(evt, accountName, accountID);
            }
        });

        dashboard.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        dashboard.setText("Dashboard");
        dashboard.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        dashboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dashboardMouseClicked(evt, accountName, accountID);
            }
        });

        appointmentLable.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        appointmentLable.setText("Appointment");
        appointmentLable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        appointmentLable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentMouseClicked(evt, accountName, accountID);
            }
        });

        timeSlot_consult.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        String text = isStudent ? "Consult" : "Time Slot";
        timeSlot_consult.setText(text);

        timeSlot_consult.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        timeSlot_consult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultMouseClicked(evt, accountName, accountID);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));


        name.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        name.setText(accountName);

        id.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        id.setText(accountID);

        ImageIcon profilePic = new ImageIcon("src/main/java/Assignment/image/profile_pic_50x50.png");
        picHolder.setIcon(profilePic);
        picHolder.setText("");

        ImageIcon exitPic = new ImageIcon("src/main/java/Assignment/image/sign_out.png");
        exit.setIcon(exitPic);
        exit.setText("");
        exit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ExitMouseClicked(evt);
            }
        });

        // if accountID startswith L, lecturer is signed in, displayed Student title, vice versa
        String role = accountID.startsWith("L") ? "Student" : "Lecturer";
        apptHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                        "Date", "Start Time", "End Time", role, "Feedback"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        });
//        apptHistoryTable.setDefaultEditor(String.class, null);
        jScrollPane1.setViewportView(apptHistoryTable);
        apptHistoryTable.getTableHeader().setResizingAllowed(false);
        DefaultTableModel model = (DefaultTableModel) apptHistoryTable.getModel();

        for (Appointment appointment : appointmentList) {
            boolean isComplete = appointment.status.equals(String.valueOf(STATUS.Complete));
            if (!isComplete) {
                continue;
            }
            if (isStudent && accountID.equals(appointment.studentID)) {
                String lecturerName = findName(appointment.lecturerID, userList);
                model.addRow(new Object[]{appointment.date, appointment.startTime, appointment.endTime, lecturerName, appointment.lecturerFeed.replace("$COMMA$", ",")});
            } else if (!isStudent && accountID.equals(appointment.lecturerID)) {
                String studentName = findName(appointment.studentID, userList);
                model.addRow(new Object[]{appointment.date, appointment.startTime, appointment.endTime, studentName, appointment.studentFeed.replace("$COMMA$", ",")});
            }
        }

        TableCustom.apply(jScrollPane1, TableCustom.TableType.MULTI_LINE);



        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(picHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addComponent(exit)
                                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(picHolder, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addComponent(name)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(id))))
                                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(31, 31, 31)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                                        .addComponent(dashboard)
                                                        .addComponent(history)
                                                        .addComponent(feedback)
                                                        .addComponent(appointmentLable)
                                                        .addComponent(timeSlot_consult)))
                                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(dashboard, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(history, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(feedback, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(appointmentLable, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(timeSlot_consult, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 10, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        pack();
        System.out.println(appointmentList.size());
    }// </editor-fold>

    private void ExitMouseClicked(java.awt.event.MouseEvent evt) {
        int selection = JOptionPane.showConfirmDialog(rootPane, "Are you sure want to logout...");
        if (selection == JOptionPane.YES_OPTION) {
            loginGUI login = new loginGUI();
            login.setVisible(true);
            this.dispose();
        }
    }

    private String findName(String accountID, List<User> userList) {
        for (User users : userList) {
            if (users.accountID.equals(accountID)) {
                return (users.accountName);
            }
        }
        return "Cannot find record";
    }

    private void dashboardMouseClicked(java.awt.event.MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        dashboardGUI obj = new dashboardGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void historyMouseClicked(java.awt.event.MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        historyGUI obj = new historyGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();

    }

    private void feedbackMouseClicked(java.awt.event.MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        feedbackGUI obj = new feedbackGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void appointmentMouseClicked(java.awt.event.MouseEvent evt, String accountName, String accountID) {
        // TODO add your handling code here:
        appointmentGUI obj = new appointmentGUI(accountName, accountID);
        obj.setVisible(true);
        this.dispose();
    }

    private void consultMouseClicked(java.awt.event.MouseEvent evt, String accountName, String accountID) {
        if (isStudent) {
            studentConsultGUI obj = new studentConsultGUI(accountName, accountID);
            obj.setVisible(true);
        } else {
            lecturerSetApptGUI obj = new lecturerSetApptGUI(accountName, accountID);
            obj.setVisible(true);
        }
        this.dispose();
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(historyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(historyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(historyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(historyGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new historyGUI("", "S1").setVisible(true);
//                new appointmentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel appointmentLable;
    private javax.swing.JTable apptHistoryTable;
    private javax.swing.JLabel timeSlot_consult;
    private javax.swing.JLabel dashboard;
    private javax.swing.JLabel exit;
    private javax.swing.JLabel feedback;
    private javax.swing.JLabel history;
    private javax.swing.JLabel id;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel name;
    private javax.swing.JLabel picHolder;
    private final AppointmentRepository appointmentRepo = new AppointmentRepository();
    private final UserRepository userRepo = new UserRepository();
    private List<Appointment> appointmentList = appointmentRepo.getAppointment();
    private List<User> userList = userRepo.getUsers();
    private boolean isStudent;
    // End of variables declaration
}
